import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../../models/job_listing.dart';
import '../../core/supabase_config.dart';
import '../../components/success_popup.dart';
import '../../services/ai_service.dart';

class CreateJobListingScreen extends StatefulWidget {
  final Map<String, dynamic>? jobListing;
  
  const CreateJobListingScreen({
    super.key,
    this.jobListing,
  });

  @override
  State<CreateJobListingScreen> createState() => _CreateJobListingScreenState();
}

class _CreateJobListingScreenState extends State<CreateJobListingScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _requirementsController = TextEditingController();
  final _locationController = TextEditingController();
  final _salaryController = TextEditingController();
  final _interviewMessageController = TextEditingController();
  bool _isLoading = false;
  bool _isGeneratingTips = false;
  List<String> _videoTips = [];

  @override
  void initState() {
    super.initState();
    if (widget.jobListing != null) {
      _titleController.text = widget.jobListing!['title'];
      _descriptionController.text = widget.jobListing!['description'];
      _requirementsController.text = widget.jobListing!['requirements'] ?? '';
      _locationController.text = widget.jobListing!['location'] ?? '';
      _salaryController.text = widget.jobListing!['salary']?.toString() ?? '';
      _interviewMessageController.text = widget.jobListing!['interview_message_template'] ?? 
          'Hi! Thanks for applying. We would like to schedule an interview with you. Please let me know your availability for this week.';
      _videoTips = List<String>.from(widget.jobListing!['video_application_tips'] ?? []);
    }
  }

  Future<void> _generateVideoTips() async {
    if (_titleController.text.isEmpty || 
        _descriptionController.text.isEmpty || 
        _requirementsController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please fill in the job title, description, and requirements first'),
          backgroundColor: Colors.orange,
        ),
      );
      return;
    }

    setState(() => _isGeneratingTips = true);

    try {
      final tips = await AiService.generateVideoApplicationTips(
        jobTitle: _titleController.text,
        description: _descriptionController.text,
        requirements: _requirementsController.text,
      );

      setState(() {
        _videoTips = tips;
        _isGeneratingTips = false;
      });

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Video application tips generated successfully'),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      print('Error generating video tips: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error generating video tips: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
      setState(() => _isGeneratingTips = false);
    }
  }

  Future<void> _createJobListing() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      final userId = supabase.auth.currentUser?.id;
      if (userId == null) throw Exception('User not authenticated');

      // Generate video tips if not already generated
      if (_videoTips.isEmpty) {
        await _generateVideoTips();
      }

      final jobListing = JobListing(
        id: '',  // Will be generated by Supabase
        businessId: userId,
        title: _titleController.text,
        description: _descriptionController.text,
        requirements: _requirementsController.text,
        createdAt: DateTime.now(),
        isActive: true,
        location: _locationController.text,
        salary: _salaryController.text,
        interviewMessageTemplate: _interviewMessageController.text,
        videoApplicationTips: _videoTips,
      );

      await supabase
          .from('job_listings')
          .insert(jobListing.toMap());

      if (mounted) {
        SuccessPopup.show(context, 'Job listing added successfully');
        Navigator.pop(context);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error creating job listing: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Create Job Listing'),
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            TextFormField(
              controller: _titleController,
              decoration: const InputDecoration(labelText: 'Job Title'),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter a job title';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _descriptionController,
              decoration: const InputDecoration(labelText: 'Job Description'),
              maxLines: 5,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter a job description';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _requirementsController,
              decoration: const InputDecoration(labelText: 'Requirements'),
              maxLines: 3,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter job requirements';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _locationController,
              decoration: const InputDecoration(labelText: 'Location (Optional)'),
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _salaryController,
              decoration: const InputDecoration(labelText: 'Salary (Optional)'),
              keyboardType: TextInputType.number,
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _interviewMessageController,
              decoration: const InputDecoration(
                labelText: 'Interview Message Template',
                helperText: 'This message will be sent when inviting candidates to interview',
              ),
              maxLines: 3,
            ),
            const SizedBox(height: 24),
            if (_videoTips.isNotEmpty) ...[
              const Text(
                'Video Application Tips',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 8),
              ...List.generate(_videoTips.length, (index) {
                return Padding(
                  padding: const EdgeInsets.only(bottom: 8),
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text('${index + 1}. '),
                      Expanded(
                        child: Text(_videoTips[index]),
                      ),
                    ],
                  ),
                );
              }),
              const SizedBox(height: 16),
            ],
            ElevatedButton.icon(
              onPressed: _isGeneratingTips ? null : _generateVideoTips,
              icon: _isGeneratingTips
                  ? const SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(strokeWidth: 2),
                    )
                  : const Icon(Icons.tips_and_updates),
              label: Text(_isGeneratingTips
                  ? 'Generating Tips...'
                  : _videoTips.isEmpty
                      ? 'Generate Video Application Tips'
                      : 'Regenerate Tips'),
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _isLoading ? null : _createJobListing,
              child: _isLoading
                  ? const CircularProgressIndicator()
                  : const Text('Create Job Listing'),
            ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _requirementsController.dispose();
    _locationController.dispose();
    _salaryController.dispose();
    _interviewMessageController.dispose();
    super.dispose();
  }
} 