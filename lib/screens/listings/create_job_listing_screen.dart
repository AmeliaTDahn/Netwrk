import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../../models/job_listing.dart';
import '../../core/supabase_config.dart';
import '../../components/success_popup.dart';

class CreateJobListingScreen extends StatefulWidget {
  const CreateJobListingScreen({super.key});

  @override
  State<CreateJobListingScreen> createState() => _CreateJobListingScreenState();
}

class _CreateJobListingScreenState extends State<CreateJobListingScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _requirementsController = TextEditingController();
  final _locationController = TextEditingController();
  final _salaryController = TextEditingController();
  final _interviewMessageController = TextEditingController();
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    if (widget.jobListing != null) {
      _titleController.text = widget.jobListing!['title'];
      _descriptionController.text = widget.jobListing!['description'];
      _locationController.text = widget.jobListing!['location'] ?? '';
      _interviewMessageController.text = widget.jobListing!['interview_message_template'] ?? 
          'Hi! Thanks for applying. We would like to schedule an interview with you. Please let me know your availability for this week.';
    }
  }

  Future<void> _createJobListing() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      final userId = supabase.auth.currentUser?.id;
      if (userId == null) throw Exception('User not authenticated');

      final jobListing = JobListing(
        id: '',  // Will be generated by Supabase
        businessId: userId,
        title: _titleController.text,
        description: _descriptionController.text,
        requirements: _requirementsController.text,
        createdAt: DateTime.now(),
        isActive: true,
        location: _locationController.text,
        salary: _salaryController.text,
        interviewMessageTemplate: _interviewMessageController.text,
      );

      await supabase
          .from('job_listings')
          .insert(jobListing.toMap());

      if (mounted) {
        // Show success popup instead of banner
        SuccessPopup.show(context, 'Job listing added successfully');
        Navigator.pop(context);  // Go back to previous screen
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error creating job listing: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Create Job Listing'),
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            TextFormField(
              controller: _titleController,
              decoration: const InputDecoration(labelText: 'Job Title'),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter a job title';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _descriptionController,
              decoration: const InputDecoration(labelText: 'Description'),
              maxLines: 3,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter a job description';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _requirementsController,
              decoration: const InputDecoration(labelText: 'Requirements'),
              maxLines: 3,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter job requirements';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _locationController,
              decoration: const InputDecoration(
                labelText: 'Location',
                hintText: 'Enter job location',
              ),
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _interviewMessageController,
              decoration: const InputDecoration(
                labelText: 'Interview Message Template',
                hintText: 'Message to send when scheduling interviews',
              ),
              maxLines: 3,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter an interview message template';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _salaryController,
              decoration: const InputDecoration(labelText: 'Salary'),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter a salary';
                }
                return null;
              },
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _isLoading ? null : _createJobListing,
              child: _isLoading
                  ? const CircularProgressIndicator()
                  : const Text('Create Listing'),
            ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _requirementsController.dispose();
    _locationController.dispose();
    _salaryController.dispose();
    _interviewMessageController.dispose();
    super.dispose();
  }
} 